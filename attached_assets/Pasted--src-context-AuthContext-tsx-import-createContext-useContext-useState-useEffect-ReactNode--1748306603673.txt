// src/context/AuthContext.tsx
import { createContext, useContext, useState, useEffect, ReactNode } from "react";
import jwtDecode from "jwt-decode";

// Tipos de roles possÃ­veis
export type Role =
  | "ADMIN"
  | "DONO_DE_CLINICA"
  | "COLAB_N1"
  | "COLAB_N2"
  | "COLAB_N3"
  | "PACIENTE";

interface User {
  id: string;
  roles: Role[];
}

interface AuthContextType {
  user: User | null;
  hasAnyRole: (...roles: Role[]) => boolean;
  login: (token: string) => void;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: ReactNode }) {
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    const token = localStorage.getItem("access_token");
    if (token) {
      const payload = jwtDecode<{ sub: string; roles: Role[] }>(token);
      setUser({ id: payload.sub, roles: payload.roles });
    }
  }, []);

  const hasAnyRole = (...roles: Role[]) => {
    if (!user) return false;
    return roles.some((r) => user.roles.includes(r));
  };

  const login = (token: string) => {
    localStorage.setItem("access_token", token);
    const payload = jwtDecode<{ sub: string; roles: Role[] }>(token);
    setUser({ id: payload.sub, roles: payload.roles });
  };

  const logout = () => {
    localStorage.removeItem("access_token");
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, hasAnyRole, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}


// src/layouts/AdminLayout.tsx
import { ReactNode } from "react";
import AppShell from "@/components/layout/AppShell";
import AdminSidebar from "@/components/sidebar/AdminSidebar";

interface AdminLayoutProps {
  children: ReactNode;
}

export default function AdminLayout({ children }: AdminLayoutProps) {
  return (
    <AppShell>
      <AdminSidebar />
      {children}
    </AppShell>
  );
}

// src/layouts/ClinicOwnerLayout.tsx
import { ReactNode } from "react";
import AppShell from "@/components/layout/AppShell";
import OwnerSidebar from "@/components/sidebar/OwnerSidebar";

interface ClinicOwnerLayoutProps {
  children: ReactNode;
}

export function ClinicOwnerLayout({ children }: ClinicOwnerLayoutProps) {
  return (
    <AppShell>
      <OwnerSidebar />
      {children}
    </AppShell>
  );
}

// src/layouts/CollaboratorLayout.tsx
import { ReactNode } from "react";
import AppShell from "@/components/layout/AppShell";
import CollaboratorSidebar from "@/components/sidebar/CollaboratorSidebar";

interface CollaboratorLayoutProps {
  level: "n1" | "n2" | "n3";
  children: ReactNode;
}

export function CollaboratorLayout({ level, children }: CollaboratorLayoutProps) {
  return (
    <AppShell>
      <CollaboratorSidebar level={level} />
      {children}
    </AppShell>
  );
}

// src/layouts/PatientLayout.tsx
import { ReactNode } from "react";
import AppShell from "@/components/layout/AppShell";
import PatientSidebar from "@/components/sidebar/PatientSidebar";

interface PatientLayoutProps {
  children: ReactNode;
}

export function PatientLayout({ children }: PatientLayoutProps) {
  return (
    <AppShell>
      <PatientSidebar />
      {children}
    </AppShell>
  );
}
