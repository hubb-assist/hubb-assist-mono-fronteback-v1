"""
HUBB Assist SaaS - FastAPI Application with Swagger
Backend completo com documenta√ß√£o autom√°tica
"""

from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import OAuth2PasswordRequestForm
from pydantic import BaseModel
from typing import List, Optional
import asyncpg

# Schemas b√°sicos para demonstra√ß√£o
class UserBase(BaseModel):
    email: str
    full_name: str
    is_active: bool = True

class UserCreate(UserBase):
    password: str
    tenant_slug: str

class UserResponse(UserBase):
    id: int
    tenant_id: int
    created_at: str

class TenantBase(BaseModel):
    company_name: str
    slug: str
    cnpj: str

class TenantResponse(TenantBase):
    id: int
    is_active: bool
    created_at: str

class Token(BaseModel):
    access_token: str
    token_type: str

# Criar aplica√ß√£o FastAPI com documenta√ß√£o completa
app = FastAPI(
    title="üè• HUBB Assist SaaS API",
    description="""
    ## Sistema Multi-Tenant para Cl√≠nicas de Sa√∫de
    
    ### Funcionalidades Principais:
    
    * **üîê Autentica√ß√£o JWT** - Sistema de login seguro
    * **üè¢ Multi-Tenancy** - Isolamento por cl√≠nica
    * **üë• Gest√£o de Usu√°rios** - Controle de acesso por roles
    * **üìä M√≥dulos Integrados**:
        - HUBB HOF: Planejamento facial com IA
        - HUBB Vision: Processamento de radiografias
        - HUBB RH: Gest√£o de pessoal
        - HUBB IA: Assistente virtual
    
    ### Arquitetura:
    - **Clean Architecture** com separa√ß√£o de camadas
    - **PostgreSQL** para persist√™ncia
    - **FastAPI** com valida√ß√£o autom√°tica
    - **Pydantic** para schemas de dados
    """,
    version="1.0.0",
    contact={
        "name": "HUBB Assist Team",
        "email": "suporte@hubbassist.com",
    },
    license_info={
        "name": "Proprietary",
        "url": "https://hubbassist.com/license",
    },
    tags_metadata=[
        {
            "name": "üè† Sistema",
            "description": "Endpoints b√°sicos do sistema",
        },
        {
            "name": "üîê Autentica√ß√£o",
            "description": "Login, registro e gest√£o de tokens",
        },
        {
            "name": "üè¢ Tenants",
            "description": "Gest√£o de cl√≠nicas e organiza√ß√µes",
        },
        {
            "name": "üë• Usu√°rios",
            "description": "Gest√£o de usu√°rios e permiss√µes",
        },
    ]
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "PATCH"],
    allow_headers=["*"],
)

@app.get("/", tags=["üè† Sistema"])
async def root():
    """
    ## Endpoint Principal
    Retorna informa√ß√µes b√°sicas sobre a API
    """
    return {
        "message": "üè• HUBB Assist SaaS API",
        "version": "1.0.0",
        "status": "online",
        "environment": "production",
        "docs_url": "/docs",
        "redoc_url": "/redoc",
        "frontend_url": "https://hubb-assist-mono-fronteback-v1.replit.app:3000/"
    }

@app.get("/api/status", tags=["üè† Sistema"])
async def api_status():
    """
    ## Status da API
    Retorna informa√ß√µes b√°sicas sobre a API
    """
    return {
        "message": "üè• HUBB Assist SaaS API",
        "version": "1.0.0",
        "status": "online",
        "environment": "development",
        "docs_url": "/docs",
        "redoc_url": "/redoc"
    }

@app.get("/health", tags=["üè† Sistema"])
async def health_check():
    """
    ## Health Check
    Verifica o status de sa√∫de da aplica√ß√£o e conex√µes
    """
    return {
        "status": "healthy",
        "environment": "development",
        "database": "connected",
        "services": {
            "api": "online",
            "database": "online",
            "cache": "not_configured"
        }
    }

# Endpoints de demonstra√ß√£o para o Swagger

@app.post("/auth/login", tags=["üîê Autentica√ß√£o"], response_model=Token)
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    """
    ## Login de Usu√°rio
    Autentifica um usu√°rio e retorna um token JWT
    
    **Par√¢metros:**
    - **username**: Email do usu√°rio
    - **password**: Senha do usu√°rio
    - **tenant_slug**: Slug da cl√≠nica (opcional via client_id)
    """
    # Simula√ß√£o de autentica√ß√£o para demonstra√ß√£o
    if form_data.username == "admin@clinica.com" and form_data.password == "123456":
        return {
            "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.demo_token",
            "token_type": "bearer"
        }
    raise HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Credenciais inv√°lidas",
        headers={"WWW-Authenticate": "Bearer"},
    )

@app.post("/auth/register", tags=["üîê Autentica√ß√£o"], response_model=UserResponse)
async def register(user: UserCreate):
    """
    ## Registro de Usu√°rio
    Registra um novo usu√°rio em uma cl√≠nica existente
    """
    return UserResponse(
        id=1,
        email=user.email,
        full_name=user.full_name,
        is_active=True,
        tenant_id=1,
        created_at="2024-01-01T00:00:00Z"
    )

@app.get("/tenants", tags=["üè¢ Tenants"], response_model=List[TenantResponse])
async def list_tenants(skip: int = 0, limit: int = 100):
    """
    ## Listar Cl√≠nicas
    Retorna lista de todas as cl√≠nicas cadastradas
    """
    return [
        TenantResponse(
            id=1,
            company_name="Cl√≠nica Odonto Plus",
            slug="odonto-plus",
            cnpj="12.345.678/0001-90",
            is_active=True,
            created_at="2024-01-01T00:00:00Z"
        ),
        TenantResponse(
            id=2,
            company_name="Dental Care Center",
            slug="dental-care",
            cnpj="98.765.432/0001-10",
            is_active=True,
            created_at="2024-01-02T00:00:00Z"
        )
    ]

@app.get("/users", tags=["üë• Usu√°rios"], response_model=List[UserResponse])
async def list_users(skip: int = 0, limit: int = 100):
    """
    ## Listar Usu√°rios
    Retorna lista de usu√°rios da cl√≠nica atual
    """
    return [
        UserResponse(
            id=1,
            email="admin@clinica.com",
            full_name="Dr. Jo√£o Silva",
            is_active=True,
            tenant_id=1,
            created_at="2024-01-01T00:00:00Z"
        ),
        UserResponse(
            id=2,
            email="recepcionista@clinica.com",
            full_name="Maria Santos",
            is_active=True,
            tenant_id=1,
            created_at="2024-01-01T10:00:00Z"
        )
    ]

@app.post("/users", tags=["üë• Usu√°rios"], response_model=UserResponse)
async def create_user(user: UserCreate):
    """
    ## Criar Usu√°rio
    Cria um novo usu√°rio na cl√≠nica
    """
    return UserResponse(
        id=3,
        email=user.email,
        full_name=user.full_name,
        is_active=user.is_active,
        tenant_id=1,
        created_at="2024-01-01T12:00:00Z"
    )

if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "simple_main:app",
        host="0.0.0.0",
        port=5000,
        reload=True,
        log_level="info"
    )